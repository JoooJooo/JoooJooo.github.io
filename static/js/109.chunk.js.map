{"version":3,"file":"static/js/109.chunk.js","sources":["webpack://client/./src/common/form/hooks/createModelFormHook.ts","webpack://client/./src/common/form/hooks/createValidationHook.ts","webpack://client/./src/common/form/hooks/useFormValidations.ts","webpack://client/./src/common/form/hooks/useZoom.ts","webpack://client/./src/common/form/utils/pathSelector.ts","webpack://client/./src/common/form/utils/isSuperPath.ts","webpack://client/./src/common/form/components/ZodErrorMapper.tsx","webpack://client/./src/common/form/components/FormModelInputs.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotNavHeader.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotDetailsNav.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotDetailsLayout.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotConfigure.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotChannels.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotEvents.tsx","webpack://client/./src/modules/bots/pages/BotDetails/BotSecrets.tsx","webpack://client/./src/modules/bots/pages/BotDetails/index.tsx"],"sourcesContent":["import { z, AnyZodObject } from 'zod';\r\nimport { type Immutable } from 'immer';\r\n\r\nimport { useTemporaryState } from '@tdp/common/shared/useTemporaryState';\r\nimport { ModelForm } from '@tdp/common/form';\r\n\r\nimport { createValidationHook } from './createValidationHook';\r\n\r\nexport function createModelFormHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    const useValidation = createValidationHook(schema);\r\n\r\n    return function useModelForm(defaultValue: z.infer<TSchema>): ModelForm<TSchema> {\r\n        const { state, clearState, updateState } = useTemporaryState(defaultValue);\r\n        const validationErrors = useValidation(state);\r\n        return {\r\n            base: defaultValue as Immutable<typeof defaultValue>,\r\n            current: state as Immutable<typeof state>,\r\n            clear: clearState,\r\n            update: updateState,\r\n            validationErrors\r\n        };\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { z, AnyZodObject } from 'zod';\r\n\r\nexport function createValidationHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    return function useValidation<TState extends z.infer<TSchema>>(state: TState) {\r\n        const validationErrors = useMemo(() => {\r\n            const result = schema.safeParse(state); // Assume no async validations, those would need something heavier than this hook can provide\r\n            if (result.success) return [];\r\n            return result.error.issues;\r\n        }, [state]);\r\n        return validationErrors;\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { Pathable, PathsSelectorFrom, pathsSelector as realizePaths, isSuperPath, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * Creates a convenient consolidation of only the validation errors for a set of sub-parts of the model/form.\r\n * \r\n * This is exceptionally experimental and only supports validations right now. \r\n * \r\n * @param modelForm The model form\r\n * @param pathsSelector the selector into the sub-model/form\r\n * @returns a tuple of [isInvalid, validationErrors]\r\n */\r\nexport function useFormValidations<TSchema extends Pathable>(modelForm: FormLens<TSchema>, pathsSelector: PathsSelectorFrom<TSchema>) {\r\n    /*\r\n     * This is likely not an optimal or generalizable solution for traversal(s)\r\n     * read: https://hackage.haskell.org/package/optics-core-0.1/docs/Optics-Traversal.html\r\n     * read: https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/a-little-lens-starter-tutorial#i-think-i-understand-prisms-now--what-are-traversals-\r\n     * As of right now, I don't see a clean and readably way to define traversals in TS as you can observe in the example here: \r\n     *  https://chrispenner.ca/posts/traversal-systems#keeping-references which shows how ugly this is without a DSL. Typescript has no first-class monad or way of declaring DSLs\r\n     * so I think we sidestep the issue by just writing bespoke traversals if/when needed such as this one. \r\n     */\r\n    const paths = useMemo(() => realizePaths(pathsSelector), [pathsSelector]);\r\n    // This is probably wildly inefficient for large forms with many validation errors. (NxMxL complexity for N errors, M paths and L path lengths)\r\n    const validationErrors = useMemo(() => modelForm.validationErrors\r\n        .filter(error => paths.some(path => isSuperPath(path, error.path))),\r\n        [modelForm.validationErrors, paths]);\r\n\r\n    return [validationErrors.length > 0, validationErrors] as const; //const cast so typescript knows it is a tuple.\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { produce, Immutable } from 'immer';\r\nimport { get, set } from 'lodash';\r\n\r\nimport { PathSelector, Pathable, pathSelector as realizePath, isSuperPath, FormUpdater, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * \"Zooms in\" on a specific path in the form model, providing a more convenient API for interacting with a section of the model/form.\r\n * @param modelForm The model fom\r\n * @param pathSelector a selector for the subpath of the model/form\r\n * @returns a lens for the interacting with the sub-form/model\r\n */\r\nexport function useZoom<TSchema extends Pathable, TValue>(\r\n    modelForm: FormLens<TSchema>,\r\n    pathSelector: PathSelector<TSchema, TValue>): FormLens<TValue> {\r\n    const path = useMemo(() => \r\n        Array.isArray(pathSelector) ? \r\n            pathSelector :\r\n            realizePath(pathSelector),\r\n        [pathSelector]);\r\n\r\n    // This is inefficient, but with memoization it is probably suitable for the near-term.\r\n    // if there are any perf issues with render / changes to the validation errors this is the first place to look.\r\n    // TODO(nibeauli): investigate if the debounce/throttle memo hooks are useful here?\r\n    const validationErrors = useMemo(() => modelForm.validationErrors.filter(error => isSuperPath(path, error.path)),\r\n        [modelForm.validationErrors, path]);\r\n\r\n    // lodash has challenges with typing, so we'll just cast this for now.\r\n    // also for some reason it thinks the empty path means undefined and not just the original object.\r\n    const base = path.length > 0 ? get(modelForm.base, path) : modelForm.base as Immutable<TValue>;\r\n    const current = path.length > 0 ? get(modelForm.current, path) : modelForm.current as Immutable<TValue>;\r\n\r\n    const updateValue = useCallback((cb: Parameters<FormUpdater<TValue>>[0]) => {\r\n        const next = produce(current, cb);\r\n        modelForm.update(model => {\r\n            set(model, path, next);\r\n        });\r\n    }, [current]);\r\n\r\n    const clearValue = useCallback(() => {\r\n        modelForm.update(model => {\r\n            set(model, path, base);\r\n        });\r\n    }, [current]);\r\n\r\n    return {\r\n        base,\r\n        current,\r\n        update: updateValue,\r\n        clear: clearValue,\r\n        validationErrors\r\n    };\r\n}\r\n","import { Immutable } from 'immer';\r\n/**\r\n * Utility function for generating 'paths' into an object.\r\n * \r\n * Useful for typing methods like lodash's get and set.\r\n * \r\n * @param selector \r\n * @returns a path (array) into the object\r\n */\r\nexport function pathSelector<From extends Pathable, To>(selector: PathSelector<From, To>) {\r\n    const proxy = createPathTrackingProxy<From>();\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const result = selector(proxy) as PathSelectionWrapperInternal<To>;\r\n    return result[PathSymbol];\r\n}\r\n\r\nfunction isNumber(p: string) {\r\n    return !isNaN(parseFloat(p));\r\n}\r\n\r\nexport type Pathable = Record<string, unknown> | unknown[];\r\n/**\r\n * Type for wrapping an existing type and ensuring that it is only treated as an AST (no setting or calling of properties or sub-properties)\r\n */\r\nexport type PathSelectionWrapper<T extends Pathable | unknown> = Immutable<T>;\r\n\r\n// Internal symbol for keeping track of the 'path' into the object\r\n// used to avoid pollution if someone goes and uses something clever like Object.keys\r\nconst PathSymbol = Symbol('path');\r\ntype PathSelectionWrapperInternal<T extends Pathable | unknown> = PathSelectionWrapper<T> & { [PathSymbol]: (number | string)[]};\r\nfunction createPathTrackingProxy<S extends Pathable | unknown>(basePath: (number | string)[] = []): PathSelectionWrapperInternal<S> {\r\n    return new Proxy<PathSelectionWrapperInternal<S>>({} as PathSelectionWrapperInternal<S>, {\r\n        get(_, prop) {\r\n            if (prop === PathSymbol) {\r\n                return basePath;\r\n            } else if (typeof prop === 'symbol') {\r\n                throw new Error('unable to path with symbols');\r\n            } else if (isNumber(prop)) {\r\n                return createPathTrackingProxy(basePath.concat(parseFloat(prop)));\r\n            } else {\r\n                return createPathTrackingProxy(basePath.concat(prop));\r\n            }\r\n        },\r\n        apply() {\r\n            // ideally the type system would erase the callable but that seems to cause issues with primitives like\r\n            // string no longer being valid strings. So we'll just throw an error here that should be caught by the\r\n            // developer during development. If this makes it to runtime it means the path selector code was never called. \r\n            throw new Error('Cannot call a function when during path selection.');\r\n        }\r\n    });\r\n}\r\n\r\nexport type PathSelector<From extends Pathable, To> = (o: PathSelectionWrapper<From>) => PathSelectionWrapper<To>;\r\n\r\nexport type PathsSelectorFrom<T extends Pathable> = \r\n    (o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[];\r\n\r\nexport type PathsSelectorTo<T extends unknown[]> = (o: PathSelectionWrapper<unknown>) => PathSelectionWrapper<T[number]>[];\r\n\r\n/**\r\n * Utility for defining a 'path' into a typed object in a type-safe manner.\r\n * @param selector \r\n * @returns \r\n */\r\nexport function pathsSelector<T extends Pathable>(selector: ((o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[])) {\r\n    const proxy = createPathTrackingProxy<T>();\r\n\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const results = selector(proxy) as PathSelectionWrapperInternal<unknown>[];\r\n    const paths = results.map(r => r[PathSymbol]);\r\n    return paths;\r\n}\r\n","\r\n/**\r\n * Check if one path is a super-path of another.\r\n *\r\n * Note: this implementation is probably grossly inefficient.\r\n * @param superPath\r\n * @param subPath\r\n * @returns\r\n */\r\n\r\nimport { FormPath } from \"@tdp/common/form\";\r\n\r\nexport function isSuperPath(superPath: FormPath, subPath: FormPath) {\r\n    return superPath.every((part, index) => part === subPath[index]);\r\n}\r\n","import { ZodIssue } from 'zod';\r\n\r\ntype KnownErrorCode = ZodIssue['code'];\r\n\r\n//TODO(nibeauli): rig this up with the i18n system of choice so the errors are localized.\r\nconst errorMap: Record<KnownErrorCode, (issue: ZodIssue) => JSX.Element> = {\r\n    invalid_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_literal: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    unrecognized_keys: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union_discriminator: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_enum_value: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_arguments: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_return_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_date: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_string: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_small: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_big: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_intersection_types: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_multiple_of: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_finite: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    custom: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    }\r\n};\r\n\r\nexport type ZodErrorMapperProps = {\r\n    id: string, // id used for aria-describedby\r\n    className?: string,\r\n    issues: Zod.ZodIssue[],\r\n};\r\nexport const ZodErrorMapper = ({id, issues, className}: ZodErrorMapperProps) => {\r\n    //TODO(nibeauli): add bounds handling for issue.code\r\n    return (\r\n        <ul id={id} className={className}>\r\n            {issues.map((issue, index) => <li key={index}>{errorMap[issue.code](issue)}</li>)}\r\n        </ul>\r\n    );\r\n};\r\n","import { z } from \"zod\";\r\nimport { Label, Input, useId, makeStyles, tokens } from '@fluentui/react-components';\r\nimport {useCallback} from \"react\";\r\n\r\nimport { FormLens } from \"@tdp/common/form\";\r\nimport { ZodErrorMapper } from \"./ZodErrorMapper\";\r\n\r\nconst useStyles = makeStyles({\r\n    errorText: {\r\n        color: tokens.colorPaletteRedForeground1,\r\n    }\r\n});\r\nexport type FormModelInputProps = {\r\n    lens: FormLens<string>,\r\n    label: string\r\n    errorMapper?: (props: {id: string, className: string, issues: z.ZodIssue[]}) => JSX.Element\r\n};\r\nexport const FormModelInput = ({lens, label, errorMapper}: FormModelInputProps) => {\r\n    const classes = useStyles();\r\n    const onInputChange = useCallback((_:unknown, data: {value: string}) => {\r\n        lens.update(() => data.value);\r\n    }, [lens.update]);\r\n    const ErrorMapper = errorMapper ?? ZodErrorMapper;\r\n    const inputId = useId('form-model-input');\r\n    const errorsId = useId('form-model-input-errors');\r\n    return (\r\n        <>\r\n            <Label htmlFor={inputId}>{label}</Label>\r\n            <Input id={inputId} value={lens.current} onChange={onInputChange} aria-describedby={errorsId}/>\r\n            <ErrorMapper id={errorsId} className={classes.errorText} issues={lens.validationErrors}/>\r\n        </>\r\n    );\r\n};\r\n","import { makeStyles, Image, Skeleton, SkeletonItem, shorthands, tokens } from \"@fluentui/react-components\";\r\nimport { BotFrameworkBot } from \"@tdp/modules/models/BotFrameworkBot\";\r\nimport { Immutable } from \"immer\";\r\n\r\nconst useStyles = makeStyles({\r\n    botNavHeader: {\r\n        paddingLeft: '1em',\r\n        boxSizing: 'border-box',\r\n        display: 'grid',\r\n        gridTemplateColumns: 'min-content 80%',\r\n        ...shorthands.gap('10px'),\r\n        alignItems: 'center',\r\n    },\r\n    botImage: {\r\n        maxHeight: '48px',\r\n        maxWidth: '48px',\r\n        backgroundColor: tokens.colorSubtleBackgroundSelected\r\n    }\r\n});\r\nexport type BotNavHeaderProps = {\r\n    className?: string\r\n    bot?: Immutable<BotFrameworkBot>\r\n};\r\nexport const BotNavHeader = ({bot}: BotNavHeaderProps) => {\r\n    const classes = useStyles();\r\n    return !bot ? <BotNavHeaderSkeleton /> : (\r\n        <div className={classes.botNavHeader}>\r\n            <Image className={classes.botImage} shape=\"square\" src={bot.iconUrl} />\r\n            <h2>{bot.name}</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst BotNavHeaderSkeleton = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Skeleton>\r\n            <div className={classes.botNavHeader}>\r\n                <SkeletonItem shape=\"square\" size={48}/>\r\n                <SkeletonItem size={24}/>\r\n            </div>\r\n        </Skeleton> \r\n    );\r\n};\r\n","\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Immutable } from 'immer';\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ToggleButton, makeStyles } from \"@fluentui/react-components\";\r\n\r\nimport { PropsFor } from \"@tdp/common/shared/tsUtils\";\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\n\r\nimport { BotNavHeader } from \"./BotNavHeader\";\r\n\r\nexport type BotDetailsNavProps = {\r\n    className?: string,\r\n    bot?: Immutable<BotFrameworkBot>\r\n};\r\nexport const BotDetailsNav = ({ className, bot }: BotDetailsNavProps) => {\r\n    return (\r\n        <div className={className}>\r\n            <BotNavHeader bot={bot} />\r\n            <NavLinkItem disabled={!bot} path={'configure'}>\r\n                <FormattedMessage\r\n                    defaultMessage=\"Configure\"\r\n                    description=\"Navigation button to the configuration section of bot details\" />\r\n            </NavLinkItem>\r\n            <NavLinkItem disabled={!bot} path={'channels'}>\r\n                <FormattedMessage\r\n                    defaultMessage=\"Channels\"\r\n                    description=\"Navigation button to the channels section of bot details\" />\r\n            </NavLinkItem>\r\n            <NavLinkItem disabled={true} path={'events'}>\r\n                <FormattedMessage\r\n                    defaultMessage=\"Events\"\r\n                    description=\"Navigation button to the events section of bot details\" />\r\n            </NavLinkItem>\r\n            <NavLinkItem disabled={true} path={'client-secrets'}>\r\n                <FormattedMessage\r\n                    defaultMessage=\"Client secrets\"\r\n                    description=\"Navigation button to the client secrets section of bot details\" />\r\n            </NavLinkItem>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useNavLinkStyles = makeStyles({\r\n    button: {\r\n        width: '100%',\r\n        justifyContent: 'left'\r\n    }\r\n});\r\ntype NavLinkItemProps = {\r\n    path: string, //TODO(nibeauli) should this be a union type of all possible paths? how do we keep that in sync with the router(s)?\r\n} & PropsFor<typeof ToggleButton>;\r\nconst NavLinkItem = (props: NavLinkItemProps) => {\r\n    const classes = useNavLinkStyles();\r\n    return (\r\n        <NavLink to={props.path}>\r\n            {({ isActive }) => (<ToggleButton className={classes.button} checked={isActive} appearance=\"subtle\" {...props} />)}\r\n        </NavLink>\r\n    );\r\n};\r\n","import { makeStyles, tokens } from \"@fluentui/react-components\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    botDetailsContainer: {\r\n        backgroundColor: tokens.colorNeutralBackground1,\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    navPane: {\r\n        width: '320px',\r\n        height: '100%',\r\n    },\r\n    detailsPane: {\r\n        flexGrow: 1,\r\n        height: '100%'\r\n    }\r\n});\r\n\r\nexport type BotDetailsLayoutProps = {\r\n    navigationPane: JSX.Element\r\n};\r\nexport const BotDetailsLayout = ({navigationPane}: BotDetailsLayoutProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.botDetailsContainer}>\r\n            { navigationPane }\r\n            <div className={classes.detailsPane}>\r\n                <Outlet />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Immutable } from \"immer\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Input } from \"@fluentui/react-components\";\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\nimport { FormUpdater } from '@tdp/common/form';\r\nimport { PropsFor } from \"@tdp/common/shared/tsUtils\";\r\n\r\nexport type BotConfigureProps = {\r\n    className?: string\r\n    bot?: Immutable<BotFrameworkBot>\r\n    updateBot: FormUpdater<BotFrameworkBot>\r\n};\r\nexport const BotConfigure = (props: BotConfigureProps) => {\r\n    const onMessagingEndpointChange: PropsFor<typeof Input>['onChange'] = (ev, data) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.messagingEndpoint = data.value;\r\n        });\r\n    };\r\n    return (\r\n        <div className={props.className}>\r\n            <h3>\r\n                <FormattedMessage defaultMessage=\"Configure\" description={\"Title for the configure section of bot details\"}/>\r\n            </h3>\r\n            <section>\r\n                <h5>Endpoint Address</h5>\r\n                <Input value={props.bot?.messagingEndpoint} onChange={onMessagingEndpointChange}/>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import { Immutable } from \"immer\";\r\nimport { Checkbox } from \"@fluentui/react-components\";\r\nimport { useIntl } from \"react-intl\";\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\n\r\nimport { FormUpdater } from '@tdp/common/form';\r\nimport { PropsFor } from \"@tdp/common/shared/tsUtils\";\r\n\r\nexport type BotChannelsProps = {\r\n    className?: string\r\n    bot?: Immutable<BotFrameworkBot>\r\n    updateBot: FormUpdater<BotFrameworkBot>\r\n};\r\nexport const BotChannels = (props: BotChannelsProps) => {\r\n    const intl = useIntl();\r\n    const hasTeamsChannel = props.bot?.configuredChannels.some(v => v === \"msteams\") ?? false;\r\n    const hasM365Channel = props.bot?.configuredChannels.some(v => v === \"m365extensions\") ?? false;\r\n    const onToggleTeamsChannel: PropsFor<typeof Checkbox>['onChange'] = (ev) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.configuredChannels = hasTeamsChannel \r\n                ? draft.configuredChannels.filter(v => v !== 'msteams')\r\n                : draft.configuredChannels.concat(\"msteams\");\r\n        });\r\n    };\r\n    const onToggleM365Channel: PropsFor<typeof Checkbox>['onChange'] = (ev) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.configuredChannels = hasM365Channel\r\n                ? draft.configuredChannels.filter(v => v !== 'm365extensions')\r\n                : draft.configuredChannels.concat(\"m365extensions\");\r\n        });\r\n    };\r\n    return (\r\n        <div className={props.className}>\r\n            <h3>Channels</h3>\r\n            <section>\r\n                <Checkbox disabled={!props.bot} checked={hasTeamsChannel} onChange={onToggleTeamsChannel}\r\n                    label={intl.formatMessage({\r\n                        defaultMessage: \"Microsoft Teams\", \r\n                        description:\"radio button label for selecting Microsoft Teams bot channel\"})}/>\r\n                <Checkbox disabled={!props.bot} checked={hasM365Channel} onChange={onToggleM365Channel}\r\n                     label={intl.formatMessage({\r\n                        defaultMessage: \"Microsoft 365 Extensions (Preview}\",\r\n                        description: \"radio button label for selecting Microsoft 365 Extensions bot channel\"\r\n                    })} \r\n                />\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import { Immutable } from \"immer\";\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { Checkbox } from \"@fluentui/react-components\";\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\nimport { FormUpdater } from '@tdp/common/form';\r\nimport { PropsFor } from \"@tdp/common/shared/tsUtils\";\r\n\r\nexport type BotEventsProps = {\r\n    className?: string\r\n    bot?: Immutable<BotFrameworkBot>\r\n    updateBot: FormUpdater<BotFrameworkBot>\r\n};\r\nexport const BotEvents = (props: BotEventsProps) => {\r\n    const intl = useIntl();\r\n    const hasTeamsChannel = props.bot?.configuredChannels.some(v => v === \"msteams\") ?? false;\r\n    const hasM365Channel = props.bot?.configuredChannels.some(v => v === \"m365extensions\") ?? false;\r\n    const onToggleTeamsChannel: PropsFor<typeof Checkbox>['onChange'] = (ev) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.configuredChannels = hasTeamsChannel \r\n                ? draft.configuredChannels.filter(v => v !== 'msteams')\r\n                : draft.configuredChannels.concat(\"msteams\");\r\n        });\r\n    };\r\n    const onToggleM365Channel: PropsFor<typeof Checkbox>['onChange'] = (ev) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.configuredChannels = hasM365Channel\r\n                ? draft.configuredChannels.filter(v => v !== 'm365extensions')\r\n                : draft.configuredChannels.concat(\"m365extensions\");\r\n        });\r\n    };\r\n    return (\r\n        <div className={props.className}>\r\n            <h3>\r\n                <FormattedMessage\r\n                    defaultMessage=\"Meeting event subscriptions\"\r\n                    description=\"Title for the event subscriptions page in bot details\" />\r\n            </h3>\r\n            <section>\r\n                <Checkbox disabled={!props.bot} checked={hasTeamsChannel} onChange={onToggleTeamsChannel}\r\n                    label={intl.formatMessage({\r\n                        defaultMessage: \"Participant join\",\r\n                        description: \"Label for the participant join event subscription opt-in\"\r\n                    })}/>\r\n                <Checkbox disabled={!props.bot} checked={hasM365Channel} onChange={onToggleM365Channel}\r\n                    label={intl.formatMessage({\r\n                        defaultMessage: \"Participant leave\",\r\n                        description: \"Label for the participant leave event subscription opt-in\"\r\n                    })}/>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import { Immutable } from \"immer\";\r\nimport { Input } from \"@fluentui/react-components\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\nimport { FormUpdater } from '@tdp/common/form';\r\nimport { PropsFor } from \"@tdp/common/shared/tsUtils\";\r\n\r\nexport type BotSecretsProps = {\r\n    className?: string\r\n    bot?: Immutable<BotFrameworkBot>\r\n    updateBot: FormUpdater<BotFrameworkBot>\r\n};\r\nexport const BotSecrets = (props: BotSecretsProps) => {\r\n    const onMessagingEndpointChange: PropsFor<typeof Input>['onChange'] = (ev, data) => {\r\n        ev.preventDefault();\r\n        props.updateBot(draft => {\r\n            draft.messagingEndpoint = data.value;\r\n        });\r\n    };\r\n    return (\r\n        <div className={props.className}>\r\n            <h3>\r\n                <FormattedMessage defaultMessage=\"Client secrets\" description={\"Title for the event subscriptions page in bot details\"} />\r\n            </h3>\r\n            <section>\r\n                <Input value={props.bot?.messagingEndpoint} onChange={onMessagingEndpointChange}/>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import { makeStyles, tokens } from \"@fluentui/react-components\";\r\nimport { useEffect } from \"react\";\r\nimport { Route, Routes, useParams, Navigate } from \"react-router-dom\";\r\n\r\nimport { useCommand, useSelector } from '@tdp';\r\nimport { createModelFormHook } from '@tdp/common/form/hooks';\r\n\r\nimport { botSlice, BotFrameworkBot, BotFrameworkBotSchema } from \"@tdp/modules/bots\";\r\n\r\nimport { BotDetailsNav } from \"./BotDetailsNav\";\r\nimport { BotDetailsLayout } from \"./BotDetailsLayout\";\r\nimport { BotConfigure } from \"./BotConfigure\";\r\nimport { BotChannels } from \"./BotChannels\";\r\nimport { BotEvents } from \"./BotEvents\";\r\nimport { BotSecrets } from \"./BotSecrets\";\r\n\r\nconst useStyles = makeStyles({\r\n    botDetailsContainer: {\r\n        backgroundColor: tokens.colorNeutralBackground1,\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    navPane: {\r\n        width: '320px',\r\n        height: '100%',\r\n    },\r\n    detailsPane: {\r\n        flexGrow: 1,\r\n        height: '100%'\r\n    }\r\n});\r\n\r\nconst useBotFrameworkFormObject = createModelFormHook(BotFrameworkBotSchema);\r\nconst emptyBot: BotFrameworkBot = {\r\n    botId: '',\r\n    callingEndpoint: null,\r\n    configuredChannels: [],\r\n    description: '',\r\n    iconUrl: '',\r\n    messagingEndpoint: '', \r\n    name: ''\r\n};\r\nexport const BotDetailsPage = () => {\r\n    const classes = useStyles();\r\n    const botForm = useBotFrameworkFormObject(emptyBot);\r\n    const { botId } = useParams<{botId: string}>();\r\n    //TODO(nibeauli): refactor the page hierarchy so all the /bots/ routes are under one container page that does this.\r\n    const loadBots = useCommand(commands => commands.botCommands.loadBots);\r\n    console.log('botId', botId);\r\n    useEffect(() => {\r\n        loadBots();\r\n    }, []);\r\n\r\n    const bot = useSelector(s => botId ? botSlice.selectors.selectById(s, botId) : undefined);\r\n    useEffect(() => {\r\n        if (bot) {\r\n            // This is a bit of a kludge to initialize the form. This pattern should be cleaner / normalized\r\n            botForm.update((oldBot)=> Object.assign(oldBot, bot));\r\n        }\r\n    }, [bot]);   \r\n\r\n    const isSkeleton = !bot;\r\n    return (\r\n        <div aria-busy={isSkeleton} className={classes.botDetailsContainer}>\r\n            {/* TODO(nibeauli): find a way of making this component reusable since we have this L2 nav pattern repeated */}\r\n            <Routes>\r\n                <Route element={<BotDetailsLayout navigationPane={<BotDetailsNav className={classes.navPane} bot={isSkeleton ? undefined : botForm.current}/>}/>}>\r\n                    <Route path=\"\" element={<Navigate to=\"configure\" replace />}></Route>\r\n                    <Route path=\"configure\" element={<BotConfigure bot={botForm.current} updateBot={botForm.update}/>} />\r\n                    <Route path=\"channels\" element={<BotChannels bot={isSkeleton ? undefined : botForm.current} updateBot={botForm.update}/>} />\r\n                    <Route path=\"events\" element={<BotEvents bot={isSkeleton ? undefined : botForm.current} updateBot={botForm.update}/>} />\r\n                    <Route path=\"client-secrets\" element={<BotSecrets bot={isSkeleton ? undefined : botForm.current} updateBot={botForm.update}/>} />\r\n                    <Route path=\"*\" element={<span> 404: We're not sure how you got here, but rest assured we'll get you back home in just a second. </span>} />\r\n                </Route>\r\n            </Routes>\r\n        </div>\r\n    );\r\n};\r\n"],"names":["createModelFormHook","schema","useValidation","state","useMemo","result","defaultValue","_useTemporaryState","clearState","updateState","validationErrors","useFormValidations","modelForm","pathsSelector","paths","realizePaths","error","path","isSuperPath","useZoom","pathSelector","Array","realizePath","base","get","current","updateValue","useCallback","cb","next","produce","model","set","clearValue","selector","createPathTrackingProxy","PathSymbol","Symbol","basePath","Proxy","_","prop","_type_of","Error","isNaN","parseFloat","apply","results","r","superPath","subPath","part","index","errorMap","invalid_type","issue","invalid_literal","unrecognized_keys","invalid_union","invalid_union_discriminator","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite","custom","ZodErrorMapper","id","issues","className","useStyles","makeStyles","tokens","FormModelInput","lens","label","errorMapper","classes","onInputChange","data","inputId","useId","errorsId","Label","Input","ErrorMapper","shorthands","BotNavHeader","bot","Image","BotNavHeaderSkeleton","Skeleton","SkeletonItem","BotDetailsNav","NavLinkItem","FormattedMessage","useNavLinkStyles","props","NavLink","isActive","ToggleButton","BotDetailsLayout","navigationPane","Outlet","BotConfigure","_props_bot","ev","draft","BotChannels","_props_bot_configuredChannels_some","_props_bot_configuredChannels_some1","intl","useIntl","hasTeamsChannel","v","hasM365Channel","Checkbox","BotEvents","BotSecrets","useBotFrameworkFormObject","BotFrameworkBotSchema","emptyBot","BotDetailsPage","botForm","botId","useParams","loadBots","useCommand","commands","console","useEffect","useSelector","s","botSlice","undefined","oldBot","Object","isSkeleton","Routes","Route","Navigate"],"mappings":"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"}