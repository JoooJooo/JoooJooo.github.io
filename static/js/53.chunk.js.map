{"version":3,"file":"static/js/53.chunk.js","sources":["webpack://client/./src/common/form/components/FormModelInputs.tsx","webpack://client/./src/common/form/components/ZodErrorMapper.tsx","webpack://client/./src/common/form/hooks/createModelFormHook.ts","webpack://client/./src/common/form/hooks/createValidationHook.ts","webpack://client/./src/common/form/hooks/useFormValidations.ts","webpack://client/./src/common/form/hooks/useZoom.ts","webpack://client/./src/common/form/utils/isSuperPath.ts","webpack://client/./src/common/form/utils/pathSelector.ts","webpack://client/./src/common/lro/hooks.ts","webpack://client/./src/modules/bots/pages/BotList/BotCreationTrackingDialog.tsx","webpack://client/./src/modules/bots/pages/BotList/BotList.tsx","webpack://client/./src/modules/bots/pages/BotList/BotNavBar.tsx","webpack://client/./src/modules/bots/pages/BotList/NewBotDialog.tsx","webpack://client/./src/modules/bots/pages/BotList/index.tsx"],"sourcesContent":["import { z } from \"zod\";\r\nimport { Label, Input, useId, makeStyles, tokens } from '@fluentui/react-components';\r\nimport {useCallback} from \"react\";\r\n\r\nimport { FormLens } from \"@tdp/common/form\";\r\nimport { ZodErrorMapper } from \"./ZodErrorMapper\";\r\n\r\nconst useStyles = makeStyles({\r\n    errorText: {\r\n        color: tokens.colorPaletteRedForeground1,\r\n    }\r\n});\r\nexport type FormModelInputProps = {\r\n    lens: FormLens<string>,\r\n    label: string\r\n    errorMapper?: (props: {id: string, className: string, issues: z.ZodIssue[]}) => JSX.Element\r\n};\r\nexport const FormModelInput = ({lens, label, errorMapper}: FormModelInputProps) => {\r\n    const classes = useStyles();\r\n    const onInputChange = useCallback((_:unknown, data: {value: string}) => {\r\n        lens.update(() => data.value);\r\n    }, [lens.update]);\r\n    const ErrorMapper = errorMapper ?? ZodErrorMapper;\r\n    const inputId = useId('form-model-input');\r\n    const errorsId = useId('form-model-input-errors');\r\n    return (\r\n        <>\r\n            <Label htmlFor={inputId}>{label}</Label>\r\n            <Input id={inputId} value={lens.current} onChange={onInputChange} aria-describedby={errorsId}/>\r\n            <ErrorMapper id={errorsId} className={classes.errorText} issues={lens.validationErrors}/>\r\n        </>\r\n    );\r\n};\r\n","import { ZodIssue } from 'zod';\r\n\r\ntype KnownErrorCode = ZodIssue['code'];\r\n\r\n//TODO(nibeauli): rig this up with the i18n system of choice so the errors are localized.\r\nconst errorMap: Record<KnownErrorCode, (issue: ZodIssue) => JSX.Element> = {\r\n    invalid_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_literal: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    unrecognized_keys: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union_discriminator: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_enum_value: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_arguments: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_return_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_date: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_string: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_small: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_big: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_intersection_types: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_multiple_of: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_finite: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    custom: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    }\r\n};\r\n\r\nexport type ZodErrorMapperProps = {\r\n    id: string, // id used for aria-describedby\r\n    className?: string,\r\n    issues: Zod.ZodIssue[],\r\n};\r\nexport const ZodErrorMapper = ({id, issues, className}: ZodErrorMapperProps) => {\r\n    //TODO(nibeauli): add bounds handling for issue.code\r\n    return (\r\n        <ul id={id} className={className}>\r\n            {issues.map((issue, index) => <li key={index}>{errorMap[issue.code](issue)}</li>)}\r\n        </ul>\r\n    );\r\n};\r\n","import { z, AnyZodObject } from 'zod';\r\nimport { type Immutable } from 'immer';\r\n\r\nimport { useTemporaryState } from '@tdp/common/shared/useTemporaryState';\r\nimport { ModelForm } from '@tdp/common/form';\r\n\r\nimport { createValidationHook } from './createValidationHook';\r\n\r\nexport function createModelFormHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    const useValidation = createValidationHook(schema);\r\n\r\n    return function useModelForm(defaultValue: z.infer<TSchema>): ModelForm<TSchema> {\r\n        const { state, clearState, updateState } = useTemporaryState(defaultValue);\r\n        const validationErrors = useValidation(state);\r\n        return {\r\n            base: defaultValue as Immutable<typeof defaultValue>,\r\n            current: state as Immutable<typeof state>,\r\n            clear: clearState,\r\n            update: updateState,\r\n            validationErrors\r\n        };\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { z, AnyZodObject } from 'zod';\r\n\r\nexport function createValidationHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    return function useValidation<TState extends z.infer<TSchema>>(state: TState) {\r\n        const validationErrors = useMemo(() => {\r\n            const result = schema.safeParse(state); // Assume no async validations, those would need something heavier than this hook can provide\r\n            if (result.success) return [];\r\n            return result.error.issues;\r\n        }, [state]);\r\n        return validationErrors;\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { Pathable, PathsSelectorFrom, pathsSelector as realizePaths, isSuperPath, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * Creates a convenient consolidation of only the validation errors for a set of sub-parts of the model/form.\r\n * \r\n * This is exceptionally experimental and only supports validations right now. \r\n * \r\n * @param modelForm The model form\r\n * @param pathsSelector the selector into the sub-model/form\r\n * @returns a tuple of [isInvalid, validationErrors]\r\n */\r\nexport function useFormValidations<TSchema extends Pathable>(modelForm: FormLens<TSchema>, pathsSelector: PathsSelectorFrom<TSchema>) {\r\n    /*\r\n     * This is likely not an optimal or generalizable solution for traversal(s)\r\n     * read: https://hackage.haskell.org/package/optics-core-0.1/docs/Optics-Traversal.html\r\n     * read: https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/a-little-lens-starter-tutorial#i-think-i-understand-prisms-now--what-are-traversals-\r\n     * As of right now, I don't see a clean and readably way to define traversals in TS as you can observe in the example here: \r\n     *  https://chrispenner.ca/posts/traversal-systems#keeping-references which shows how ugly this is without a DSL. Typescript has no first-class monad or way of declaring DSLs\r\n     * so I think we sidestep the issue by just writing bespoke traversals if/when needed such as this one. \r\n     */\r\n    const paths = useMemo(() => realizePaths(pathsSelector), [pathsSelector]);\r\n    // This is probably wildly inefficient for large forms with many validation errors. (NxMxL complexity for N errors, M paths and L path lengths)\r\n    const validationErrors = useMemo(() => modelForm.validationErrors\r\n        .filter(error => paths.some(path => isSuperPath(path, error.path))),\r\n        [modelForm.validationErrors, paths]);\r\n\r\n    return [validationErrors.length > 0, validationErrors] as const; //const cast so typescript knows it is a tuple.\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { produce, Immutable } from 'immer';\r\nimport { get, set } from 'lodash';\r\n\r\nimport { PathSelector, Pathable, pathSelector as realizePath, isSuperPath, FormUpdater, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * \"Zooms in\" on a specific path in the form model, providing a more convenient API for interacting with a section of the model/form.\r\n * @param modelForm The model fom\r\n * @param pathSelector a selector for the subpath of the model/form\r\n * @returns a lens for the interacting with the sub-form/model\r\n */\r\nexport function useZoom<TSchema extends Pathable, TValue>(\r\n    modelForm: FormLens<TSchema>,\r\n    pathSelector: PathSelector<TSchema, TValue>): FormLens<TValue> {\r\n    const path = useMemo(() => \r\n        Array.isArray(pathSelector) ? \r\n            pathSelector :\r\n            realizePath(pathSelector),\r\n        [pathSelector]);\r\n\r\n    // This is inefficient, but with memoization it is probably suitable for the near-term.\r\n    // if there are any perf issues with render / changes to the validation errors this is the first place to look.\r\n    // TODO(nibeauli): investigate if the debounce/throttle memo hooks are useful here?\r\n    const validationErrors = useMemo(() => modelForm.validationErrors.filter(error => isSuperPath(path, error.path)),\r\n        [modelForm.validationErrors, path]);\r\n\r\n    // lodash has challenges with typing, so we'll just cast this for now.\r\n    // also for some reason it thinks the empty path means undefined and not just the original object.\r\n    const base = path.length > 0 ? get(modelForm.base, path) : modelForm.base as Immutable<TValue>;\r\n    const current = path.length > 0 ? get(modelForm.current, path) : modelForm.current as Immutable<TValue>;\r\n\r\n    const updateValue = useCallback((cb: Parameters<FormUpdater<TValue>>[0]) => {\r\n        const next = produce(current, cb);\r\n        modelForm.update(model => {\r\n            set(model, path, next);\r\n        });\r\n    }, [current]);\r\n\r\n    const clearValue = useCallback(() => {\r\n        modelForm.update(model => {\r\n            set(model, path, base);\r\n        });\r\n    }, [current]);\r\n\r\n    return {\r\n        base,\r\n        current,\r\n        update: updateValue,\r\n        clear: clearValue,\r\n        validationErrors\r\n    };\r\n}\r\n","\r\n/**\r\n * Check if one path is a super-path of another.\r\n *\r\n * Note: this implementation is probably grossly inefficient.\r\n * @param superPath\r\n * @param subPath\r\n * @returns\r\n */\r\n\r\nimport { FormPath } from \"@tdp/common/form\";\r\n\r\nexport function isSuperPath(superPath: FormPath, subPath: FormPath) {\r\n    return superPath.every((part, index) => part === subPath[index]);\r\n}\r\n","import { Immutable } from 'immer';\r\n/**\r\n * Utility function for generating 'paths' into an object.\r\n * \r\n * Useful for typing methods like lodash's get and set.\r\n * \r\n * @param selector \r\n * @returns a path (array) into the object\r\n */\r\nexport function pathSelector<From extends Pathable, To>(selector: PathSelector<From, To>) {\r\n    const proxy = createPathTrackingProxy<From>();\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const result = selector(proxy) as PathSelectionWrapperInternal<To>;\r\n    return result[PathSymbol];\r\n}\r\n\r\nfunction isNumber(p: string) {\r\n    return !isNaN(parseFloat(p));\r\n}\r\n\r\nexport type Pathable = Record<string, unknown> | unknown[];\r\n/**\r\n * Type for wrapping an existing type and ensuring that it is only treated as an AST (no setting or calling of properties or sub-properties)\r\n */\r\nexport type PathSelectionWrapper<T extends Pathable | unknown> = Immutable<T>;\r\n\r\n// Internal symbol for keeping track of the 'path' into the object\r\n// used to avoid pollution if someone goes and uses something clever like Object.keys\r\nconst PathSymbol = Symbol('path');\r\ntype PathSelectionWrapperInternal<T extends Pathable | unknown> = PathSelectionWrapper<T> & { [PathSymbol]: (number | string)[]};\r\nfunction createPathTrackingProxy<S extends Pathable | unknown>(basePath: (number | string)[] = []): PathSelectionWrapperInternal<S> {\r\n    return new Proxy<PathSelectionWrapperInternal<S>>({} as PathSelectionWrapperInternal<S>, {\r\n        get(_, prop) {\r\n            if (prop === PathSymbol) {\r\n                return basePath;\r\n            } else if (typeof prop === 'symbol') {\r\n                throw new Error('unable to path with symbols');\r\n            } else if (isNumber(prop)) {\r\n                return createPathTrackingProxy(basePath.concat(parseFloat(prop)));\r\n            } else {\r\n                return createPathTrackingProxy(basePath.concat(prop));\r\n            }\r\n        },\r\n        apply() {\r\n            // ideally the type system would erase the callable but that seems to cause issues with primitives like\r\n            // string no longer being valid strings. So we'll just throw an error here that should be caught by the\r\n            // developer during development. If this makes it to runtime it means the path selector code was never called. \r\n            throw new Error('Cannot call a function when during path selection.');\r\n        }\r\n    });\r\n}\r\n\r\nexport type PathSelector<From extends Pathable, To> = (o: PathSelectionWrapper<From>) => PathSelectionWrapper<To>;\r\n\r\nexport type PathsSelectorFrom<T extends Pathable> = \r\n    (o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[];\r\n\r\nexport type PathsSelectorTo<T extends unknown[]> = (o: PathSelectionWrapper<unknown>) => PathSelectionWrapper<T[number]>[];\r\n\r\n/**\r\n * Utility for defining a 'path' into a typed object in a type-safe manner.\r\n * @param selector \r\n * @returns \r\n */\r\nexport function pathsSelector<T extends Pathable>(selector: ((o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[])) {\r\n    const proxy = createPathTrackingProxy<T>();\r\n\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const results = selector(proxy) as PathSelectionWrapperInternal<unknown>[];\r\n    const paths = results.map(r => r[PathSymbol]);\r\n    return paths;\r\n}\r\n","import { DependencyList, useMemo } from 'react';\r\n\r\nimport { useSelector } from '@tdp';\r\nimport { LongRunningOperation, lroSlice } from '.';\r\n\r\nexport function createLroHooks<TState extends Record<string, unknown>>(type: string, defaultState?: TState) {\r\n    function useLro(deps: DependencyList) {\r\n        // Neat little nonce generator from https://www.codemzy.com/blog/random-unique-id-javascript\r\n        const id = useMemo(() => Math.random().toString(36).substring(2), deps);\r\n        function createLro(initialState?: TState) {\r\n            return {\r\n                id,\r\n                type,\r\n                status: 'inprogress',\r\n                startTime: Date.now(),\r\n                state: initialState ?? defaultState as TState //TODO(nibeauli): add sanity check here against undefined\r\n            } as LongRunningOperation<TState>;\r\n        }\r\n\r\n        // Just cast the unknown back down to the 'correct' state.\r\n        // The likelihood of a collision & therefore incorrect object is next to zero\r\n        const lro = useSelector((state) => lroSlice.selectors.selectById(state, id)) as LongRunningOperation<TState> | undefined;\r\n        return { lro, createLro };\r\n    }\r\n\r\n    return { useLro };\r\n}\r\n","import {\r\n    Dialog,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogBody,\r\n    Spinner,\r\n    makeStyles,\r\n    tokens,\r\n} from \"@fluentui/react-components\";\r\nimport {CheckmarkRegular, ErrorCircleRegular} from '@fluentui/react-icons';\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nimport { BotCreationLro } from \"@tdp/modules/bots\";\r\nimport { LongRunningOperation } from \"@tdp/common/lro\";\r\n\r\nexport type BotCreationTrackingDialogProps = {\r\n    lro?: LongRunningOperation<BotCreationLro>\r\n};\r\nexport const BotCreationTrackingDialog = (props: BotCreationTrackingDialogProps) => {\r\n    const intl = useIntl();\r\n    const state = props.lro?.state;\r\n    const appCreatedState = !(state?.appCreated) ? 'inprogress' : 'complete';\r\n    const botCreatedState = \r\n        (state?.botCreated === true) ? 'complete'\r\n        : appCreatedState == 'complete' ? 'pending' \r\n        : 'inprogress';\r\n    return (\r\n        <Dialog open={props.lro?.status === 'inprogress'}>\r\n            <DialogSurface>\r\n                <DialogBody>\r\n                <DialogTitle>\r\n                        <FormattedMessage defaultMessage={\"Creating Bot\"} description={\"Dialog title for bot creation progress\"} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <TrackingStep state={appCreatedState} label={intl.formatMessage({description: \"Label for progress spinner for EntraID application creation\", defaultMessage:\"EntraId Application\"})} />\r\n                        <TrackingStep state={botCreatedState} label={intl.formatMessage({defaultMessage: \"BotFramework Bot\", description: \"Label for progress spinner for BotFramework bot creation\"})} />\r\n                    </DialogContent>\r\n                </DialogBody>\r\n            </DialogSurface>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    trackingStepContainer: {\r\n        boxSizing: 'border-box',\r\n        minHeight: '2.5em'\r\n    },\r\n    icon: {\r\n        borderBottomColor: tokens.colorBrandBackground,\r\n        borderBottomStyle: 'solid',\r\n        width: '2em',\r\n        marginRight: '1em'\r\n    },\r\n    success: {\r\n        color: tokens.colorStatusSuccessForeground1,\r\n        fontSize: '1.5em', \r\n    },\r\n    failure: {\r\n        color: tokens.colorStatusDangerForeground1\r\n    }\r\n});\r\n//TODO(nibeauli): generalize this and style it...\r\n\r\nconst TrackingStep = (props: {state: 'pending' | 'inprogress' | 'complete' | 'errored', label: string}) => {\r\n    const classes = useStyles();\r\n    const iconMap = {\r\n        'pending': <></>,\r\n        'inprogress': undefined,\r\n        'complete': <CheckmarkRegular className={classes.success}/>,\r\n        'errored': <ErrorCircleRegular className={classes.failure}/>\r\n    };\r\n    const icon = iconMap[props.state];\r\n\r\n    return (\r\n        <Spinner size=\"small\" label={props.label} spinner={icon}/>\r\n    );\r\n};\r\n","import { Image, DataGrid, TableCellLayout, TableColumnDefinition, DataGridHeader, DataGridHeaderCell, DataGridRow, createTableColumn, DataGridBody, DataGridCell, makeStyles } from \"@fluentui/react-components\";\r\nimport { useMemo } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\n\r\nconst useStyles = makeStyles({\r\n    dataGrid: {\r\n        position: 'relative',\r\n        height: '100%'\r\n    },\r\n    dataGridBody: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY:'scroll'\r\n    },\r\n    botImage: {\r\n        maxHeight: '2em'\r\n    }\r\n});\r\n\r\nexport type BotListProps = {\r\n    className: string\r\n    bots: BotFrameworkBot[]\r\n};\r\nexport const BotList = (props: BotListProps) => {\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n    const BotListColumns: TableColumnDefinition<BotFrameworkBot>[] = useMemo(() => [\r\n        createTableColumn({\r\n            columnId: 'botName',\r\n            compare: (a, b) => \r\n                a.name.localeCompare(b.name),\r\n            renderHeaderCell: () => \r\n                <FormattedMessage defaultMessage={\"Bot Name\"} description={\"Table heading for bot name column\"} />,\r\n            renderCell: (bot) => \r\n                <TableCellLayout media={<Image className={classes.botImage} shape=\"rounded\" fit=\"contain\" src={bot.iconUrl} />}> \r\n                    {bot.name} \r\n                </TableCellLayout>\r\n        }),\r\n        createTableColumn({\r\n            columnId: 'botId',\r\n            renderHeaderCell: () => <FormattedMessage defaultMessage={\"Bot Id\"} description={\"Table heading for bot id column\"} />,\r\n            renderCell: (bot) => bot.botId\r\n        })\r\n    ], [classes]);\r\n    // TODO(nibeauli): investigate if this is causing over-rendering of the rows.\r\n    const onRowClick = (botId:string) => {\r\n        navigate(botId, {\r\n            relative: 'path'\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <DataGrid columns={BotListColumns} items={props.bots} sortable>\r\n                <DataGridHeader>\r\n                    <DataGridRow>\r\n                    {({ renderHeaderCell }) => (\r\n                        <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>\r\n                    )}\r\n                    </DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<BotFrameworkBot>>\r\n                    {({ item, rowId }) => (\r\n                        <DataGridRow<BotFrameworkBot> key={rowId} onClick={() => onRowClick(item.botId)}>\r\n                            {({ renderCell }) => (\r\n                                <DataGridCell>{renderCell(item)}</DataGridCell>\r\n                            )}\r\n                        </DataGridRow>\r\n                    )}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import { Button } from \"@fluentui/react-components\";\r\nimport {ChevronLeft24Filled, Add24Regular} from '@fluentui/react-icons';\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport type BotNavBarProps = {\r\n    className: string,\r\n    onNewBot: () => void\r\n};\r\nexport const BotNavBar = (props: BotNavBarProps) => {\r\n    return (\r\n        <div className={props.className}>\r\n            <Button appearance=\"transparent\" disabled icon={<ChevronLeft24Filled />}>\r\n                <FormattedMessage defaultMessage={\"Tools\"} description={\"Button for navigating back to tools page\"} />\r\n            </Button>\r\n            {/* <Divider vertical={true} /> */}\r\n            |\r\n            <Button appearance=\"transparent\" onClick={props.onNewBot} icon={<Add24Regular />}>\r\n                <FormattedMessage defaultMessage={\"New Bot\"} description={\"Button for creating a new bot\"} />\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {\r\n    Dialog,\r\n    DialogTrigger,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogBody,\r\n    DialogActions,\r\n    Button,\r\n} from \"@fluentui/react-components\";\r\nimport { castDraft } from \"immer\";\r\nimport { useCallback } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nimport { BotFrameworkBot, BotFrameworkBotSchema } from \"@tdp/modules/bots\";\r\nimport { ModelForm, useZoom, useFormValidations, FormModelInput } from '@tdp/common/form';\r\n\r\nexport type NewBotDialogProps = {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    submit: (bot: BotFrameworkBot) => void,\r\n    modelForm: ModelForm<typeof BotFrameworkBotSchema>,\r\n};\r\nexport const NewBotDialog = (props: NewBotDialogProps) => {\r\n    const intl = useIntl();\r\n    const onOpenChange = useCallback((_: unknown, data: { open: boolean }) => {\r\n        if (data.open) {\r\n            return;\r\n        }\r\n        props.onClose();\r\n    }, [props.onClose]);\r\n\r\n    const onSubmit = useCallback((ev: React.SyntheticEvent) => {\r\n        ev.preventDefault();\r\n        props.submit(castDraft(props.modelForm.current));\r\n    }, [props.submit, props.modelForm.current]);\r\n\r\n    const nameLens = useZoom(props.modelForm, bot => bot.name);\r\n    const [hasFormErrors] = useFormValidations(props.modelForm, bot => [bot.name]);\r\n    return (\r\n        <Dialog open={props.open} onOpenChange={onOpenChange}>\r\n            <DialogSurface>\r\n                <DialogBody>\r\n                    <DialogTitle>\r\n                        <FormattedMessage defaultMessage={\"Create a new bot\"} description={\"Title for new bot creation dialog\"} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <form onSubmit={onSubmit}>\r\n                            <FormModelInput lens={nameLens} label={intl.formatMessage({ description: 'Label for \"bot name\" form input', defaultMessage: \"name\" })} />\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <DialogTrigger disableButtonEnhancement>\r\n                            <Button appearance=\"secondary\">\r\n                                <FormattedMessage defaultMessage={\"Close\"} description={\"Dialog close button\"} />\r\n                            </Button>\r\n                        </DialogTrigger>\r\n                        {/* TODO(nibeauli): disable this if validation is failing for the important props */}\r\n                        <Button appearance=\"primary\" disabled={hasFormErrors} onClick={onSubmit}>\r\n                            <FormattedMessage defaultMessage={\"Create Bot\"} description={\"Primary button action for creating a new bot\"} />\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogBody>\r\n            </DialogSurface>\r\n        </Dialog>\r\n    );\r\n};\r\n","import { makeStyles, tokens } from '@fluentui/react-components';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { useCommand, useSelector } from '@tdp';\r\nimport { createModelFormHook } from '@tdp/common/form/hooks';\r\nimport { createLroHooks } from '@tdp/common/lro/hooks';\r\n\r\nimport { BotFrameworkBotSchema, botSlice, BotCreationLro } from '@tdp/modules/bots';\r\n\r\nimport { NewBotDialog, NewBotDialogProps } from './NewBotDialog';\r\nimport { BotCreationTrackingDialog } from './BotCreationTrackingDialog';\r\nimport { BotNavBar } from './BotNavBar';\r\nimport { BotList } from './BotList';\r\n\r\nconst useStyles = makeStyles({\r\n    botPageContainer: {\r\n        backgroundColor: tokens.colorNeutralBackground1,\r\n        color: tokens.colorBrandBackgroundInverted,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        boxSizing: 'border-box',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflowY: 'hidden',\r\n    },\r\n    botPageNavContainer: {\r\n        backgroundColor: tokens.colorSubtleBackground,\r\n        height: '2em',\r\n        width: '100%',\r\n        color: tokens.colorBrandForeground1,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        boxSizing: 'border-box',\r\n        paddingTop: '.25em'\r\n    },\r\n    botPageHeader: {\r\n\r\n    },\r\n    botPageContent: {\r\n        flexGrow: 2,\r\n        overflowY: 'hidden',\r\n        position: 'relative'\r\n    }\r\n});\r\n\r\nconst {useLro: useBotCreationLro} = createLroHooks<BotCreationLro>('botCreation', {appCreated: false, botCreated: false});\r\n\r\nconst useBotFrameworkFormObject = createModelFormHook(BotFrameworkBotSchema);\r\nexport const BotListPage = () => {\r\n    const classes = useStyles();\r\n    const bots = useSelector(botSlice.selectors.selectAll);\r\n    const loadBots = useCommand(commands => commands.botCommands.loadBots);\r\n    const createBotCommand = useCommand(commands => commands.botCommands.createBot);\r\n    const [showNewBotDialog, setShowNewBotDialog] = useState(false);\r\n\r\n    const onNewBotPressed = useCallback(() => {\r\n        botForm.clear();\r\n        setShowNewBotDialog(true);\r\n    }, [setShowNewBotDialog]);\r\n\r\n    const botForm = useBotFrameworkFormObject({\r\n        botId: '',\r\n        callingEndpoint: null,\r\n        configuredChannels: [],\r\n        description: '',\r\n        iconUrl: '',\r\n        messagingEndpoint: '', \r\n        name: ''\r\n    });\r\n    \r\n    const {createLro: createBotCreationLro, lro: botCreationLro} = useBotCreationLro([]);\r\n\r\n    const newBotDialogProps: NewBotDialogProps = {\r\n        modelForm: botForm,\r\n        onClose: useCallback(() => { \r\n            botForm.clear();\r\n            setShowNewBotDialog(false);\r\n        }, [botForm.clear]),\r\n        open: showNewBotDialog,\r\n        submit: useCallback((bot) => {\r\n            const lro = createBotCreationLro();\r\n            createBotCommand({\r\n                name: bot.name,\r\n                lro,\r\n                navigateOnSuccess: true\r\n            });\r\n            setShowNewBotDialog(false);\r\n        }, [createBotCommand, createBotCreationLro]),\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadBots();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <main className={classes.botPageContainer}>\r\n                <BotNavBar className={classes.botPageNavContainer} onNewBot={onNewBotPressed}/>\r\n                <hgroup className={classes.botPageHeader}>\r\n                <h5>\r\n                    <FormattedMessage\r\n                            description=\"Title for bot management page\"\r\n                            defaultMessage=\"Bot management\" />\r\n                    </h5>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            description=\"Long description of bots usage\"\r\n                            defaultMessage=\"Bots are conversational apps that perform a specific set of tasks. They communicate with users, respond to their questions, and proactively notify them about changes and other events.\" />\r\n                    </p>\r\n                </hgroup>\r\n                <BotList className={classes.botPageContent} bots={bots} />\r\n            </main>\r\n            <NewBotDialog {...newBotDialogProps}/>\r\n            <BotCreationTrackingDialog lro={botCreationLro} />\r\n        </>\r\n    );\r\n};\r\n"],"names":["useStyles","makeStyles","errorText","color","tokens","FormModelInput","lens","label","errorMapper","classes","onInputChange","useCallback","_","data","update","value","ErrorMapper","ZodErrorMapper","inputId","useId","errorsId","Label","htmlFor","Input","id","current","onChange","className","issues","validationErrors","errorMap","invalid_type","issue","message","invalid_literal","unrecognized_keys","invalid_union","invalid_union_discriminator","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite","custom","map","index","key","code","createModelFormHook","schema","useValidation","createValidationHook","defaultValue","_useTemporaryState","state","clearState","updateState","base","clear","useMemo","result","safeParse","success","error","useFormValidations","modelForm","pathsSelector","paths","realizePaths","filter","some","path","isSuperPath","length","useZoom","pathSelector","Array","isArray","realizePath","get","updateValue","cb","next","produce","model","set","clearValue","superPath","subPath","every","part","selector","createPathTrackingProxy","PathSymbol","Symbol","basePath","Proxy","prop","_type_of","Error","isNaN","parseFloat","concat","apply","results","r","createLroHooks","type","defaultState","useLro","deps","Math","random","toString","substring","lro","useSelector","lroSlice","createLro","initialState","status","startTime","Date","now","BotCreationTrackingDialog","props","_props_lro","_props_lro1","intl","useIntl","appCreatedState","appCreated","botCreatedState","botCreated","Dialog","open","DialogSurface","DialogBody","DialogTitle","FormattedMessage","defaultMessage","DialogContent","TrackingStep","formatMessage","trackingStepContainer","boxSizing","minHeight","icon","borderBottomColor","borderBottomStyle","width","marginRight","fontSize","failure","iconMap","undefined","CheckmarkRegular","ErrorCircleRegular","Spinner","size","spinner","dataGrid","position","height","dataGridBody","overflowY","botImage","maxHeight","BotList","navigate","useNavigate","BotListColumns","createTableColumn","columnId","compare","a","b","name","localeCompare","renderHeaderCell","renderCell","bot","TableCellLayout","media","Image","shape","fit","src","iconUrl","botId","onRowClick","relative","DataGrid","columns","items","bots","sortable","DataGridHeader","DataGridRow","DataGridHeaderCell","DataGridBody","item","rowId","onClick","DataGridCell","BotNavBar","Button","appearance","disabled","ChevronLeft24Filled","onNewBot","Add24Regular","NewBotDialog","onOpenChange","onClose","onSubmit","ev","preventDefault","submit","castDraft","nameLens","hasFormErrors","_useFormValidations","DialogActions","DialogTrigger","disableButtonEnhancement","botPageContainer","backgroundColor","display","flexDirection","flexGrow","paddingLeft","paddingRight","botPageNavContainer","paddingTop","botPageHeader","botPageContent","useBotCreationLro","_createLroHooks","useBotFrameworkFormObject","BotFrameworkBotSchema","BotListPage","botSlice","loadBots","useCommand","commands","botCommands","createBotCommand","createBot","_useState","showNewBotDialog","setShowNewBotDialog","onNewBotPressed","botForm","callingEndpoint","configuredChannels","description","messagingEndpoint","_useBotCreationLro","createBotCreationLro","botCreationLro","newBotDialogProps","navigateOnSuccess","useEffect"],"mappings":"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"}