{"version":3,"file":"static/js/750.chunk.js","sources":["webpack://client/./src/common/form/hooks/createModelFormHook.ts","webpack://client/./src/common/form/hooks/createValidationHook.ts","webpack://client/./src/common/form/hooks/useFormValidations.ts","webpack://client/./src/common/form/hooks/useZoom.ts","webpack://client/./src/common/form/utils/pathSelector.ts","webpack://client/./src/common/form/utils/isSuperPath.ts","webpack://client/./src/common/form/components/ZodErrorMapper.tsx","webpack://client/./src/common/form/components/FormModelInputs.tsx","webpack://client/./src/common/lro/hooks.ts","webpack://client/./src/modules/bots/pages/BotList/NewBotDialog.tsx","webpack://client/./src/modules/bots/pages/BotList/BotCreationTrackingDialog.tsx","webpack://client/./src/modules/bots/pages/BotList/BotNavBar.tsx","webpack://client/./src/modules/bots/pages/BotList/BotList.tsx","webpack://client/./src/modules/bots/pages/BotList/index.tsx"],"sourcesContent":["import { z, AnyZodObject } from 'zod';\r\nimport { type Immutable } from 'immer';\r\n\r\nimport { useTemporaryState } from '@tdp/common/shared/useTemporaryState';\r\nimport { ModelForm } from '@tdp/common/form';\r\n\r\nimport { createValidationHook } from './createValidationHook';\r\n\r\nexport function createModelFormHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    const useValidation = createValidationHook(schema);\r\n\r\n    return function useModelForm(defaultValue: z.infer<TSchema>): ModelForm<TSchema> {\r\n        const { state, clearState, updateState } = useTemporaryState(defaultValue);\r\n        const validationErrors = useValidation(state);\r\n        return {\r\n            base: defaultValue as Immutable<typeof defaultValue>,\r\n            current: state as Immutable<typeof state>,\r\n            clear: clearState,\r\n            update: updateState,\r\n            validationErrors\r\n        };\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { z, AnyZodObject } from 'zod';\r\n\r\nexport function createValidationHook<TSchema extends AnyZodObject>(schema: TSchema) {\r\n    return function useValidation<TState extends z.infer<TSchema>>(state: TState) {\r\n        const validationErrors = useMemo(() => {\r\n            const result = schema.safeParse(state); // Assume no async validations, those would need something heavier than this hook can provide\r\n            if (result.success) return [];\r\n            return result.error.issues;\r\n        }, [state]);\r\n        return validationErrors;\r\n    };\r\n}\r\n","import { useMemo } from 'react';\r\nimport { Pathable, PathsSelectorFrom, pathsSelector as realizePaths, isSuperPath, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * Creates a convenient consolidation of only the validation errors for a set of sub-parts of the model/form.\r\n * \r\n * This is exceptionally experimental and only supports validations right now. \r\n * \r\n * @param modelForm The model form\r\n * @param pathsSelector the selector into the sub-model/form\r\n * @returns a tuple of [isInvalid, validationErrors]\r\n */\r\nexport function useFormValidations<TSchema extends Pathable>(modelForm: FormLens<TSchema>, pathsSelector: PathsSelectorFrom<TSchema>) {\r\n    /*\r\n     * This is likely not an optimal or generalizable solution for traversal(s)\r\n     * read: https://hackage.haskell.org/package/optics-core-0.1/docs/Optics-Traversal.html\r\n     * read: https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/a-little-lens-starter-tutorial#i-think-i-understand-prisms-now--what-are-traversals-\r\n     * As of right now, I don't see a clean and readably way to define traversals in TS as you can observe in the example here: \r\n     *  https://chrispenner.ca/posts/traversal-systems#keeping-references which shows how ugly this is without a DSL. Typescript has no first-class monad or way of declaring DSLs\r\n     * so I think we sidestep the issue by just writing bespoke traversals if/when needed such as this one. \r\n     */\r\n    const paths = useMemo(() => realizePaths(pathsSelector), [pathsSelector]);\r\n    // This is probably wildly inefficient for large forms with many validation errors. (NxMxL complexity for N errors, M paths and L path lengths)\r\n    const validationErrors = useMemo(() => modelForm.validationErrors\r\n        .filter(error => paths.some(path => isSuperPath(path, error.path))),\r\n        [modelForm.validationErrors, paths]);\r\n\r\n    return [validationErrors.length > 0, validationErrors] as const; //const cast so typescript knows it is a tuple.\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { produce, Immutable } from 'immer';\r\nimport { get, set } from 'lodash';\r\n\r\nimport { PathSelector, Pathable, pathSelector as realizePath, isSuperPath, FormUpdater, FormLens } from '@tdp/common/form';\r\n\r\n/**\r\n * \"Zooms in\" on a specific path in the form model, providing a more convenient API for interacting with a section of the model/form.\r\n * @param modelForm The model fom\r\n * @param pathSelector a selector for the subpath of the model/form\r\n * @returns a lens for the interacting with the sub-form/model\r\n */\r\nexport function useZoom<TSchema extends Pathable, TValue>(\r\n    modelForm: FormLens<TSchema>,\r\n    pathSelector: PathSelector<TSchema, TValue>): FormLens<TValue> {\r\n    const path = useMemo(() => \r\n        Array.isArray(pathSelector) ? \r\n            pathSelector :\r\n            realizePath(pathSelector),\r\n        [pathSelector]);\r\n\r\n    // This is inefficient, but with memoization it is probably suitable for the near-term.\r\n    // if there are any perf issues with render / changes to the validation errors this is the first place to look.\r\n    // TODO(nibeauli): investigate if the debounce/throttle memo hooks are useful here?\r\n    const validationErrors = useMemo(() => modelForm.validationErrors.filter(error => isSuperPath(path, error.path)),\r\n        [modelForm.validationErrors, path]);\r\n\r\n    // lodash has challenges with typing, so we'll just cast this for now.\r\n    // also for some reason it thinks the empty path means undefined and not just the original object.\r\n    const base = path.length > 0 ? get(modelForm.base, path) : modelForm.base as Immutable<TValue>;\r\n    const current = path.length > 0 ? get(modelForm.current, path) : modelForm.current as Immutable<TValue>;\r\n\r\n    const updateValue = useCallback((cb: Parameters<FormUpdater<TValue>>[0]) => {\r\n        const next = produce(current, cb);\r\n        modelForm.update(model => {\r\n            set(model, path, next);\r\n        });\r\n    }, [current]);\r\n\r\n    const clearValue = useCallback(() => {\r\n        modelForm.update(model => {\r\n            set(model, path, base);\r\n        });\r\n    }, [current]);\r\n\r\n    return {\r\n        base,\r\n        current,\r\n        update: updateValue,\r\n        clear: clearValue,\r\n        validationErrors\r\n    };\r\n}\r\n","import { Immutable } from 'immer';\r\n/**\r\n * Utility function for generating 'paths' into an object.\r\n * \r\n * Useful for typing methods like lodash's get and set.\r\n * \r\n * @param selector \r\n * @returns a path (array) into the object\r\n */\r\nexport function pathSelector<From extends Pathable, To>(selector: PathSelector<From, To>) {\r\n    const proxy = createPathTrackingProxy<From>();\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const result = selector(proxy) as PathSelectionWrapperInternal<To>;\r\n    return result[PathSymbol];\r\n}\r\n\r\nfunction isNumber(p: string) {\r\n    return !isNaN(parseFloat(p));\r\n}\r\n\r\nexport type Pathable = Record<string, unknown> | unknown[];\r\n/**\r\n * Type for wrapping an existing type and ensuring that it is only treated as an AST (no setting or calling of properties or sub-properties)\r\n */\r\nexport type PathSelectionWrapper<T extends Pathable | unknown> = Immutable<T>;\r\n\r\n// Internal symbol for keeping track of the 'path' into the object\r\n// used to avoid pollution if someone goes and uses something clever like Object.keys\r\nconst PathSymbol = Symbol('path');\r\ntype PathSelectionWrapperInternal<T extends Pathable | unknown> = PathSelectionWrapper<T> & { [PathSymbol]: (number | string)[]};\r\nfunction createPathTrackingProxy<S extends Pathable | unknown>(basePath: (number | string)[] = []): PathSelectionWrapperInternal<S> {\r\n    return new Proxy<PathSelectionWrapperInternal<S>>({} as PathSelectionWrapperInternal<S>, {\r\n        get(_, prop) {\r\n            if (prop === PathSymbol) {\r\n                return basePath;\r\n            } else if (typeof prop === 'symbol') {\r\n                throw new Error('unable to path with symbols');\r\n            } else if (isNumber(prop)) {\r\n                return createPathTrackingProxy(basePath.concat(parseFloat(prop)));\r\n            } else {\r\n                return createPathTrackingProxy(basePath.concat(prop));\r\n            }\r\n        },\r\n        apply() {\r\n            // ideally the type system would erase the callable but that seems to cause issues with primitives like\r\n            // string no longer being valid strings. So we'll just throw an error here that should be caught by the\r\n            // developer during development. If this makes it to runtime it means the path selector code was never called. \r\n            throw new Error('Cannot call a function when during path selection.');\r\n        }\r\n    });\r\n}\r\n\r\nexport type PathSelector<From extends Pathable, To> = (o: PathSelectionWrapper<From>) => PathSelectionWrapper<To>;\r\n\r\nexport type PathsSelectorFrom<T extends Pathable> = \r\n    (o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[];\r\n\r\nexport type PathsSelectorTo<T extends unknown[]> = (o: PathSelectionWrapper<unknown>) => PathSelectionWrapper<T[number]>[];\r\n\r\n/**\r\n * Utility for defining a 'path' into a typed object in a type-safe manner.\r\n * @param selector \r\n * @returns \r\n */\r\nexport function pathsSelector<T extends Pathable>(selector: ((o: PathSelectionWrapper<T>) => PathSelectionWrapper<unknown>[])) {\r\n    const proxy = createPathTrackingProxy<T>();\r\n\r\n    // manual cast because we don't want to pollute the signature of the selector to include the symbol.\r\n    const results = selector(proxy) as PathSelectionWrapperInternal<unknown>[];\r\n    const paths = results.map(r => r[PathSymbol]);\r\n    return paths;\r\n}\r\n","\r\n/**\r\n * Check if one path is a super-path of another.\r\n *\r\n * Note: this implementation is probably grossly inefficient.\r\n * @param superPath\r\n * @param subPath\r\n * @returns\r\n */\r\n\r\nimport { FormPath } from \"@tdp/common/form\";\r\n\r\nexport function isSuperPath(superPath: FormPath, subPath: FormPath) {\r\n    return superPath.every((part, index) => part === subPath[index]);\r\n}\r\n","import { ZodIssue } from 'zod';\r\n\r\ntype KnownErrorCode = ZodIssue['code'];\r\n\r\n//TODO(nibeauli): rig this up with the i18n system of choice so the errors are localized.\r\nconst errorMap: Record<KnownErrorCode, (issue: ZodIssue) => JSX.Element> = {\r\n    invalid_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_literal: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    unrecognized_keys: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_union_discriminator: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_enum_value: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_arguments: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_return_type: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_date: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_string: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_small: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    too_big: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    invalid_intersection_types: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_multiple_of: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    not_finite: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    },\r\n    custom: function (issue: ZodIssue): JSX.Element {\r\n        return <>{issue.message}</>;\r\n    }\r\n};\r\n\r\nexport type ZodErrorMapperProps = {\r\n    id: string, // id used for aria-describedby\r\n    className?: string,\r\n    issues: Zod.ZodIssue[],\r\n};\r\nexport const ZodErrorMapper = ({id, issues, className}: ZodErrorMapperProps) => {\r\n    //TODO(nibeauli): add bounds handling for issue.code\r\n    return (\r\n        <ul id={id} className={className}>\r\n            {issues.map((issue, index) => <li key={index}>{errorMap[issue.code](issue)}</li>)}\r\n        </ul>\r\n    );\r\n};\r\n","import { z } from \"zod\";\r\nimport { Label, Input, useId, makeStyles, tokens } from '@fluentui/react-components';\r\nimport {useCallback} from \"react\";\r\n\r\nimport { FormLens } from \"@tdp/common/form\";\r\nimport { ZodErrorMapper } from \"./ZodErrorMapper\";\r\n\r\nconst useStyles = makeStyles({\r\n    errorText: {\r\n        color: tokens.colorPaletteRedForeground1,\r\n    }\r\n});\r\nexport type FormModelInputProps = {\r\n    lens: FormLens<string>,\r\n    label: string\r\n    errorMapper?: (props: {id: string, className: string, issues: z.ZodIssue[]}) => JSX.Element\r\n};\r\nexport const FormModelInput = ({lens, label, errorMapper}: FormModelInputProps) => {\r\n    const classes = useStyles();\r\n    const onInputChange = useCallback((_:unknown, data: {value: string}) => {\r\n        lens.update(() => data.value);\r\n    }, [lens.update]);\r\n    const ErrorMapper = errorMapper ?? ZodErrorMapper;\r\n    const inputId = useId('form-model-input');\r\n    const errorsId = useId('form-model-input-errors');\r\n    return (\r\n        <>\r\n            <Label htmlFor={inputId}>{label}</Label>\r\n            <Input id={inputId} value={lens.current} onChange={onInputChange} aria-describedby={errorsId}/>\r\n            <ErrorMapper id={errorsId} className={classes.errorText} issues={lens.validationErrors}/>\r\n        </>\r\n    );\r\n};\r\n","import { DependencyList, useMemo } from 'react';\r\n\r\nimport { useSelector } from '@tdp';\r\nimport { LongRunningOperation, lroSlice } from '.';\r\n\r\nexport function createLroHooks<TState extends Record<string, unknown>>(type: string, defaultState?: TState) {\r\n    function useLro(deps: DependencyList) {\r\n        // Neat little nonce generator from https://www.codemzy.com/blog/random-unique-id-javascript\r\n        const id = useMemo(() => Math.random().toString(36).substring(2), deps);\r\n        function createLro(initialState?: TState) {\r\n            return {\r\n                id,\r\n                type,\r\n                status: 'inprogress',\r\n                startTime: Date.now(),\r\n                state: initialState ?? defaultState as TState //TODO(nibeauli): add sanity check here against undefined\r\n            } as LongRunningOperation<TState>;\r\n        }\r\n\r\n        // Just cast the unknown back down to the 'correct' state.\r\n        // The likelihood of a collision & therefore incorrect object is next to zero\r\n        const lro = useSelector((state) => lroSlice.selectors.selectById(state, id)) as LongRunningOperation<TState> | undefined;\r\n        return { lro, createLro };\r\n    }\r\n\r\n    return { useLro };\r\n}\r\n","import {\r\n    Dialog,\r\n    DialogTrigger,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogBody,\r\n    DialogActions,\r\n    Button,\r\n} from \"@fluentui/react-components\";\r\nimport { castDraft } from \"immer\";\r\nimport { useCallback } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nimport { BotFrameworkBot, BotFrameworkBotSchema } from \"@tdp/modules/bots\";\r\nimport { ModelForm, useZoom, useFormValidations, FormModelInput } from '@tdp/common/form';\r\n\r\nexport type NewBotDialogProps = {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    submit: (bot: BotFrameworkBot) => void,\r\n    modelForm: ModelForm<typeof BotFrameworkBotSchema>,\r\n};\r\nexport const NewBotDialog = (props: NewBotDialogProps) => {\r\n    const intl = useIntl();\r\n    const onOpenChange = useCallback((_: unknown, data: { open: boolean }) => {\r\n        if (data.open) {\r\n            return;\r\n        }\r\n        props.onClose();\r\n    }, [props.onClose]);\r\n\r\n    const onSubmit = useCallback((ev: React.SyntheticEvent) => {\r\n        ev.preventDefault();\r\n        props.submit(castDraft(props.modelForm.current));\r\n    }, [props.submit, props.modelForm.current]);\r\n\r\n    const nameLens = useZoom(props.modelForm, bot => bot.name);\r\n    const [hasFormErrors] = useFormValidations(props.modelForm, bot => [bot.name]);\r\n    return (\r\n        <Dialog open={props.open} onOpenChange={onOpenChange}>\r\n            <DialogSurface>\r\n                <DialogBody>\r\n                    <DialogTitle>\r\n                        <FormattedMessage defaultMessage={\"Create a new bot\"} description={\"Title for new bot creation dialog\"} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <form onSubmit={onSubmit}>\r\n                            <FormModelInput lens={nameLens} label={intl.formatMessage({ description: 'Label for \"bot name\" form input', defaultMessage: \"name\" })} />\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <DialogTrigger disableButtonEnhancement>\r\n                            <Button appearance=\"secondary\">\r\n                                <FormattedMessage defaultMessage={\"Close\"} description={\"Dialog close button\"} />\r\n                            </Button>\r\n                        </DialogTrigger>\r\n                        {/* TODO(nibeauli): disable this if validation is failing for the important props */}\r\n                        <Button appearance=\"primary\" disabled={hasFormErrors} onClick={onSubmit}>\r\n                            <FormattedMessage defaultMessage={\"Create Bot\"} description={\"Primary button action for creating a new bot\"} />\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogBody>\r\n            </DialogSurface>\r\n        </Dialog>\r\n    );\r\n};\r\n","import {\r\n    Dialog,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogBody,\r\n    Spinner,\r\n    makeStyles,\r\n    tokens,\r\n} from \"@fluentui/react-components\";\r\nimport {CheckmarkRegular, ErrorCircleRegular} from '@fluentui/react-icons';\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nimport { BotCreationLro } from \"@tdp/modules/bots\";\r\nimport { LongRunningOperation } from \"@tdp/common/lro\";\r\n\r\nexport type BotCreationTrackingDialogProps = {\r\n    lro?: LongRunningOperation<BotCreationLro>\r\n};\r\nexport const BotCreationTrackingDialog = (props: BotCreationTrackingDialogProps) => {\r\n    const intl = useIntl();\r\n    const state = props.lro?.state;\r\n    const appCreatedState = !(state?.appCreated) ? 'inprogress' : 'complete';\r\n    const botCreatedState = \r\n        (state?.botCreated === true) ? 'complete'\r\n        : appCreatedState == 'complete' ? 'pending' \r\n        : 'inprogress';\r\n    return (\r\n        <Dialog open={props.lro?.status === 'inprogress'}>\r\n            <DialogSurface>\r\n                <DialogBody>\r\n                <DialogTitle>\r\n                        <FormattedMessage defaultMessage={\"Creating Bot\"} description={\"Dialog title for bot creation progress\"} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <TrackingStep state={appCreatedState} label={intl.formatMessage({description: \"Label for progress spinner for EntraID application creation\", defaultMessage:\"EntraId Application\"})} />\r\n                        <TrackingStep state={botCreatedState} label={intl.formatMessage({defaultMessage: \"BotFramework Bot\", description: \"Label for progress spinner for BotFramework bot creation\"})} />\r\n                    </DialogContent>\r\n                </DialogBody>\r\n            </DialogSurface>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    trackingStepContainer: {\r\n        boxSizing: 'border-box',\r\n        minHeight: '2.5em'\r\n    },\r\n    icon: {\r\n        borderBottomColor: tokens.colorBrandBackground,\r\n        borderBottomStyle: 'solid',\r\n        width: '2em',\r\n        marginRight: '1em'\r\n    },\r\n    success: {\r\n        color: tokens.colorStatusSuccessForeground1,\r\n        fontSize: '1.5em', \r\n    },\r\n    failure: {\r\n        color: tokens.colorStatusDangerForeground1\r\n    }\r\n});\r\n//TODO(nibeauli): generalize this and style it...\r\n\r\nconst TrackingStep = (props: {state: 'pending' | 'inprogress' | 'complete' | 'errored', label: string}) => {\r\n    const classes = useStyles();\r\n    const iconMap = {\r\n        'pending': <></>,\r\n        'inprogress': undefined,\r\n        'complete': <CheckmarkRegular className={classes.success}/>,\r\n        'errored': <ErrorCircleRegular className={classes.failure}/>\r\n    };\r\n    const icon = iconMap[props.state];\r\n\r\n    return (\r\n        <Spinner size=\"small\" label={props.label} spinner={icon}/>\r\n    );\r\n};\r\n","import { Button } from \"@fluentui/react-components\";\r\nimport {ChevronLeft24Filled, Add24Regular} from '@fluentui/react-icons';\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport type BotNavBarProps = {\r\n    className: string,\r\n    onNewBot: () => void\r\n};\r\nexport const BotNavBar = (props: BotNavBarProps) => {\r\n    return (\r\n        <div className={props.className}>\r\n            <Button appearance=\"transparent\" disabled icon={<ChevronLeft24Filled />}>\r\n                <FormattedMessage defaultMessage={\"Tools\"} description={\"Button for navigating back to tools page\"} />\r\n            </Button>\r\n            {/* <Divider vertical={true} /> */}\r\n            |\r\n            <Button appearance=\"transparent\" onClick={props.onNewBot} icon={<Add24Regular />}>\r\n                <FormattedMessage defaultMessage={\"New Bot\"} description={\"Button for creating a new bot\"} />\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import { Image, DataGrid, TableCellLayout, TableColumnDefinition, DataGridHeader, DataGridHeaderCell, DataGridRow, createTableColumn, DataGridBody, DataGridCell, makeStyles } from \"@fluentui/react-components\";\r\nimport { useMemo } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { BotFrameworkBot } from \"@tdp/modules/bots\";\r\n\r\nconst useStyles = makeStyles({\r\n    dataGrid: {\r\n        position: 'relative',\r\n        height: '100%'\r\n    },\r\n    dataGridBody: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY:'scroll'\r\n    },\r\n    botImage: {\r\n        maxHeight: '2em'\r\n    }\r\n});\r\n\r\nexport type BotListProps = {\r\n    className: string\r\n    bots: BotFrameworkBot[]\r\n};\r\nexport const BotList = (props: BotListProps) => {\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n    const BotListColumns: TableColumnDefinition<BotFrameworkBot>[] = useMemo(() => [\r\n        createTableColumn({\r\n            columnId: 'botName',\r\n            compare: (a, b) => \r\n                a.name.localeCompare(b.name),\r\n            renderHeaderCell: () => \r\n                <FormattedMessage defaultMessage={\"Bot Name\"} description={\"Table heading for bot name column\"} />,\r\n            renderCell: (bot) => \r\n                <TableCellLayout media={<Image className={classes.botImage} shape=\"rounded\" fit=\"contain\" src={bot.iconUrl} />}> \r\n                    {bot.name} \r\n                </TableCellLayout>\r\n        }),\r\n        createTableColumn({\r\n            columnId: 'botId',\r\n            renderHeaderCell: () => <FormattedMessage defaultMessage={\"Bot Id\"} description={\"Table heading for bot id column\"} />,\r\n            renderCell: (bot) => bot.botId\r\n        })\r\n    ], [classes]);\r\n    // TODO(nibeauli): investigate if this is causing over-rendering of the rows.\r\n    const onRowClick = (botId:string) => {\r\n        navigate(botId, {\r\n            relative: 'path'\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <DataGrid columns={BotListColumns} items={props.bots} sortable>\r\n                <DataGridHeader>\r\n                    <DataGridRow>\r\n                    {({ renderHeaderCell }) => (\r\n                        <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>\r\n                    )}\r\n                    </DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<BotFrameworkBot>>\r\n                    {({ item, rowId }) => (\r\n                        <DataGridRow<BotFrameworkBot> key={rowId} onClick={() => onRowClick(item.botId)}>\r\n                            {({ renderCell }) => (\r\n                                <DataGridCell>{renderCell(item)}</DataGridCell>\r\n                            )}\r\n                        </DataGridRow>\r\n                    )}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import { makeStyles, tokens } from '@fluentui/react-components';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { useCommand, useSelector } from '@tdp';\r\nimport { createModelFormHook } from '@tdp/common/form/hooks';\r\nimport { createLroHooks } from '@tdp/common/lro/hooks';\r\n\r\nimport { BotFrameworkBotSchema, botSlice, BotCreationLro } from '@tdp/modules/bots';\r\n\r\nimport { NewBotDialog, NewBotDialogProps } from './NewBotDialog';\r\nimport { BotCreationTrackingDialog } from './BotCreationTrackingDialog';\r\nimport { BotNavBar } from './BotNavBar';\r\nimport { BotList } from './BotList';\r\n\r\nconst useStyles = makeStyles({\r\n    botPageContainer: {\r\n        backgroundColor: tokens.colorNeutralBackground1,\r\n        color: tokens.colorBrandBackgroundInverted,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexGrow: 1,\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        boxSizing: 'border-box',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflowY: 'hidden',\r\n    },\r\n    botPageNavContainer: {\r\n        backgroundColor: tokens.colorSubtleBackground,\r\n        height: '2em',\r\n        width: '100%',\r\n        color: tokens.colorBrandForeground1,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        boxSizing: 'border-box',\r\n        paddingTop: '.25em'\r\n    },\r\n    botPageHeader: {\r\n\r\n    },\r\n    botPageContent: {\r\n        flexGrow: 2,\r\n        overflowY: 'hidden',\r\n        position: 'relative'\r\n    }\r\n});\r\n\r\nconst {useLro: useBotCreationLro} = createLroHooks<BotCreationLro>('botCreation', {appCreated: false, botCreated: false});\r\n\r\nconst useBotFrameworkFormObject = createModelFormHook(BotFrameworkBotSchema);\r\nexport const BotListPage = () => {\r\n    const classes = useStyles();\r\n    const bots = useSelector(botSlice.selectors.selectAll);\r\n    const loadBots = useCommand(commands => commands.botCommands.loadBots);\r\n    const createBotCommand = useCommand(commands => commands.botCommands.createBot);\r\n    const [showNewBotDialog, setShowNewBotDialog] = useState(false);\r\n\r\n    const onNewBotPressed = useCallback(() => {\r\n        botForm.clear();\r\n        setShowNewBotDialog(true);\r\n    }, [setShowNewBotDialog]);\r\n\r\n    const botForm = useBotFrameworkFormObject({\r\n        botId: '',\r\n        callingEndpoint: null,\r\n        configuredChannels: [],\r\n        description: '',\r\n        iconUrl: '',\r\n        messagingEndpoint: '', \r\n        name: ''\r\n    });\r\n    \r\n    const {createLro: createBotCreationLro, lro: botCreationLro} = useBotCreationLro([]);\r\n\r\n    const newBotDialogProps: NewBotDialogProps = {\r\n        modelForm: botForm,\r\n        onClose: useCallback(() => { \r\n            botForm.clear();\r\n            setShowNewBotDialog(false);\r\n        }, [botForm.clear]),\r\n        open: showNewBotDialog,\r\n        submit: useCallback((bot) => {\r\n            const lro = createBotCreationLro();\r\n            createBotCommand({\r\n                name: bot.name,\r\n                lro,\r\n                navigateOnSuccess: true\r\n            });\r\n            setShowNewBotDialog(false);\r\n        }, [createBotCommand, createBotCreationLro]),\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadBots();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <main className={classes.botPageContainer}>\r\n                <BotNavBar className={classes.botPageNavContainer} onNewBot={onNewBotPressed}/>\r\n                <hgroup className={classes.botPageHeader}>\r\n                <h5>\r\n                    <FormattedMessage\r\n                            description=\"Title for bot management page\"\r\n                            defaultMessage=\"Bot management\" />\r\n                    </h5>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            description=\"Long description of bots usage\"\r\n                            defaultMessage=\"Bots are conversational apps that perform a specific set of tasks. They communicate with users, respond to their questions, and proactively notify them about changes and other events.\" />\r\n                    </p>\r\n                </hgroup>\r\n                <BotList className={classes.botPageContent} bots={bots} />\r\n            </main>\r\n            <NewBotDialog {...newBotDialogProps}/>\r\n            <BotCreationTrackingDialog lro={botCreationLro} />\r\n        </>\r\n    );\r\n};\r\n"],"names":["createModelFormHook","schema","useValidation","state","useMemo","result","defaultValue","_useTemporaryState","clearState","updateState","validationErrors","useFormValidations","modelForm","pathsSelector","paths","realizePaths","error","path","isSuperPath","useZoom","pathSelector","Array","realizePath","base","get","current","updateValue","useCallback","cb","next","produce","model","set","clearValue","selector","createPathTrackingProxy","PathSymbol","Symbol","basePath","Proxy","_","prop","_type_of","Error","isNaN","parseFloat","apply","results","r","superPath","subPath","part","index","errorMap","invalid_type","issue","invalid_literal","unrecognized_keys","invalid_union","invalid_union_discriminator","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite","custom","ZodErrorMapper","id","issues","className","useStyles","makeStyles","tokens","FormModelInput","lens","label","errorMapper","classes","onInputChange","data","inputId","useId","errorsId","Label","Input","ErrorMapper","defaultState","NewBotDialog","props","intl","useIntl","onOpenChange","onSubmit","ev","castDraft","nameLens","bot","hasFormErrors","_useFormValidations","Dialog","DialogSurface","DialogBody","DialogTitle","FormattedMessage","DialogContent","DialogActions","DialogTrigger","Button","BotCreationTrackingDialog","_props_lro","_props_lro1","appCreatedState","botCreatedState","TrackingStep","icon","iconMap","undefined","CheckmarkRegular","ErrorCircleRegular","Spinner","BotNavBar","ChevronLeft24Filled","Add24Regular","BotList","navigate","useNavigate","BotListColumns","createTableColumn","a","b","TableCellLayout","Image","onRowClick","botId","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","item","rowId","renderCell","DataGridCell","useBotCreationLro","_createLroHooks","useLro","deps","Math","lro","useSelector","lroSlice","createLro","initialState","type","Date","useBotFrameworkFormObject","BotFrameworkBotSchema","BotListPage","bots","botSlice","loadBots","useCommand","commands","createBotCommand","_useState","showNewBotDialog","setShowNewBotDialog","onNewBotPressed","botForm","_useBotCreationLro","createBotCreationLro","botCreationLro","newBotDialogProps","useEffect"],"mappings":"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"}