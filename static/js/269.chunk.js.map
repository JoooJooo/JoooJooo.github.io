{"version":3,"file":"static/js/269.chunk.js","sources":["webpack://client/./src/common/host/web/authClient.ts","webpack://client/./src/common/host/web/themeClient.ts","webpack://client/./src/common/host/web/webHost.ts"],"sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\r\nimport { z } from 'zod';\r\n\r\nimport { ILogger } from '@tdp/common/telemetry';\r\nimport { IAuthClient, TokenResponse, UserContext } from '@tdp/common/auth';\r\n\r\nconst TeamsAdministratorWid = \"62e90394-69f5-4237-9190-012177145e10\";\r\nconst GlobalAdminWid = \"69091246-20e8-4a56-aa4d-066075b2a7a8\";\r\nconst MsftTenantId = \"72f988bf-86f1-41af-91ab-2d7cd011db47\";\r\n\r\n/**\r\n * Get a \"hint\" for the user's Microsoft id (their email address if we have it).\r\n * this can streamline the login process by skipping the email prompt.\r\n */\r\nexport type LoginHintProvider = () => PromiseLike<string|undefined>;\r\n\r\nexport const MsalAuthClientAdapterConfigSchema = z.object({\r\n  /**\r\n   * Scopes used for the user's default login. \r\n   * This should be the scopes for the TDP API service\r\n   */\r\n  // We need to convert the canonical string with comma separators into an array of strings \r\n  loginScopes: z.preprocess(v => typeof v === \"string\" ? v.split(',') : v, z.array(z.string()).min(1)),\r\n\r\n  /**\r\n   * Where AzureAd should redirect to after completion\r\n   */\r\n  redirectStartPage: z.string().url(),\r\n});\r\n\r\ntype MsalAuthClientAdapterConfig = z.infer<typeof MsalAuthClientAdapterConfigSchema>;\r\n\r\nexport type MsalAuthClientAdapterDeps = {\r\n    logger: ILogger\r\n    application: PublicClientApplication\r\n    loginHintProvider: LoginHintProvider\r\n    config: MsalAuthClientAdapterConfig\r\n};\r\n\r\nexport class MsalAuthClientAdapter implements IAuthClient {\r\n  private logger: ILogger;\r\n  private loginHintProvider: LoginHintProvider;\r\n  private client: PublicClientApplication;\r\n  private config: MsalAuthClientAdapterConfig;\r\n\r\n  constructor({application, loginHintProvider, config, logger}: MsalAuthClientAdapterDeps) {\r\n    this.client = application;\r\n    this.loginHintProvider = loginHintProvider;\r\n    this.logger = logger;\r\n    this.config = config;\r\n  }\r\n\r\n  // TODO(nibeauli): this should probably have the ability to add additional scopes? Or is that not x-plat capable?\r\n  // TODO: Add logout funtionality \r\n  async login(silent?: boolean): Promise<UserContext> {\r\n    let ctx = this.readUserContext();\r\n    if (ctx.type != \"unauthenticated\") {\r\n      this.logger.trace(\"User already logged in\");\r\n      return ctx;\r\n    }\r\n    const {account} = (await this.client.handleRedirectPromise()) ?? {};\r\n    if (account) {\r\n      this.logger.trace('login complete');\r\n      this.client.setActiveAccount(account);\r\n    }\r\n    const loginHint = await this.loginHintProvider();\r\n\r\n    // attempt to read the context again after silent\r\n    ctx = this.readUserContext();\r\n    if (ctx.type !== \"unauthenticated\") {\r\n      this.logger.trace(\"User logged in via silent login\");\r\n      return ctx;\r\n    }\r\n\r\n    // if we aren't planning on interactively logging in the user and we' here, just return unauthenticated\r\n    if (silent) {\r\n      this.logger.warn(\"Silent login requested and user is currently unauthenticated\");\r\n      return ctx;\r\n    }\r\n\r\n    await this.client.acquireTokenRedirect({\r\n      scopes: this.config.loginScopes,\r\n      loginHint: loginHint,\r\n      redirectStartPage: this.config.redirectStartPage\r\n    });\r\n        \r\n    throw new Error('Impossible to reach statement');\r\n  }\r\n\r\n\r\n  private readUserContext(): UserContext {\r\n    const account = this.client.getActiveAccount();\r\n    if (!account) {\r\n      return { type: 'unauthenticated' };\r\n    }\r\n    const idTokenClaims = account.idTokenClaims;\r\n    if (!idTokenClaims) {\r\n      this.logger.trace(\"No token claims on current user\");\r\n      return { type: 'unauthenticated'};\r\n    }\r\n    const name = account.name;\r\n    const aadId = idTokenClaims.oid;\r\n    const preferredUserName = idTokenClaims?.preferred_username;\r\n    const wids = (idTokenClaims?.wids ?? []) as string[]; // explict cast only because wids is extended part of the id token claims object\r\n\r\n    if (!name || !aadId || !preferredUserName) {\r\n      // Log we're missing required fields\r\n      // only log boolean values, no the actual values\r\n      this.logger.trace(\"Missing claims for current user %o\", {aadId: !!aadId, preferred_username: !!preferredUserName, name: !!name});\r\n      return { type: 'unauthenticated'};\r\n    }\r\n    const isInternal = account.tenantId === MsftTenantId;\r\n\r\n    // we have an account, translate it into a user context object\r\n    return {\r\n      type: isInternal ? 'internal' : 'authenticated',\r\n      aadId: aadId,\r\n      isTenantAdmin: wids.some(s => s === GlobalAdminWid || s === TeamsAdministratorWid),\r\n      name: name,\r\n      userName: account.username,\r\n      preferredUserName,\r\n      tenantId: account.tenantId\r\n    };\r\n  }\r\n  \r\n  async getToken(scopes: string[]): Promise<TokenResponse> {\r\n    const authenticationResult = await this.client.acquireTokenSilent({\r\n      scopes: scopes\r\n    });\r\n    //TODO(nibeauli): detect failure case and convert to unauthenticated result.\r\n    return {\r\n      type: 'success', \r\n      token: authenticationResult.accessToken\r\n    };\r\n  }\r\n}\r\n\r\nexport const MsalConfigSchema = z.object({\r\n    auth: z.object({\r\n        clientId: z.string(),\r\n        authority: z.optional(z.string()),\r\n        redirectUri: z.string()\r\n    }),\r\n    cache: z.optional(z.object({\r\n        //TODO(nibeauli)\r\n    })),\r\n});\r\n\r\nexport const AuthConfigSchema = z.object({\r\n    msal: MsalConfigSchema,\r\n    client: MsalAuthClientAdapterConfigSchema\r\n});\r\n\r\nexport type WebHostAuthDependencies =\r\n    Omit<ConstructorParameters<typeof MsalAuthClientAdapter>[0], 'application' | 'config'> & {\r\n        config: z.infer<typeof AuthConfigSchema>\r\n    };\r\n\r\nexport async function composeAuth(deps: WebHostAuthDependencies) {\r\n    const { PublicClientApplication } = await import('@azure/msal-browser');\r\n    const msal = new PublicClientApplication(deps.config.msal);\r\n    await msal.initialize();\r\n    // force cast it to interface type\r\n    const authClient = new MsalAuthClientAdapter({ ...deps, application: msal, config: deps.config.client });\r\n    return { msal, authClient };\r\n}\r\n","import { ILogger } from '@tdp/common/telemetry';\r\nimport { IThemeClientService } from '@tdp/common/theme';\r\nimport { Themes } from \"@tdp/common/theme/slice\";\r\n\r\nexport interface IThemeClientServiceDeps {\r\n  logger: ILogger\r\n}\r\n\r\nexport const preferredThemeKey = \"preferred_theme\";\r\n\r\nexport class ThemeClientService implements IThemeClientService {\r\n  private logger: ILogger;\r\n  constructor({logger}: IThemeClientServiceDeps) {\r\n\r\n    this.logger = logger;\r\n  }\r\n\r\n  public getHostTheme = () => \r\n    (localStorage.getItem(preferredThemeKey) as Themes) ?? this.setTheme(Themes.Default);\r\n\r\n  public updateTheme = (theme: Themes) => this.setTheme(theme);\r\n\r\n  private setTheme = (theme: Themes): Themes => {\r\n    this.logger.log(`Setting ${theme} theme`);\r\n    localStorage.setItem(preferredThemeKey, theme);\r\n    return theme;\r\n  };\r\n}\r\n\r\nexport function composeTheme(logger: ILogger) {\r\n  const themeClientService = new ThemeClientService({ logger });\r\n  return { themeClientService };\r\n}\r\n\r\n","import { ITdpClientHost } from '@tdp/common/host';\r\nimport { BuildConfig } from '@tdp';\r\n\r\nimport { AuthConfigSchema, composeAuth, WebHostAuthDependencies } from './authClient';\r\nimport { composeTheme } from './themeClient';\r\n\r\n\r\ntype WebHostDependencies = Omit<WebHostAuthDependencies, 'config'> & {\r\n    config: BuildConfig\r\n};\r\n\r\nexport async function createHost(deps: WebHostDependencies): Promise<ITdpClientHost> {\r\n    const { config, ...authDeps } = deps;\r\n    const authConfig = AuthConfigSchema.parse(config['auth']);\r\n    const { authClient } = await composeAuth({\r\n        config: authConfig,\r\n        ...authDeps,\r\n    });\r\n    const { themeClientService } = await composeTheme(\r\n        authDeps.logger\r\n    );\r\n    return {\r\n        auth: authClient,\r\n        themeService: themeClientService\r\n    };\r\n}\r\n"],"names":["MsalAuthClientAdapterConfigSchema","z","v","MsalAuthClientAdapter","param","application","loginHintProvider","config","logger","login","silent","ctx","_ref","account","loginHint","Error","readUserContext","_idTokenClaims_wids","idTokenClaims","name","aadId","preferredUserName","wids","isInternal","s","getToken","scopes","authenticationResult","MsalConfigSchema","AuthConfigSchema","_composeAuth","deps","msal","authClient","PublicClientApplication","preferredThemeKey","ThemeClientService","_localStorage_getItem","Themes","theme","localStorage","_createHost","authDeps","themeClientService","composeAuth"],"mappings":"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"}